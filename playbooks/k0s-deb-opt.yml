# Copyright 2025 s3rj1k
# SPDX-License-Identifier: MIT

# DEBUG: ansible-pull -U https://github.com/s3rj1k/playground.git playbooks/k0s-deb-opt.yml
#        ansible-pull -U https://github.com/s3rj1k/playground.git -e "ENABLE_DYNAMIC_CONFIG=true" playbooks/k0s-deb-opt.yml

---
- name: Kubernetes (k0s) on Debian/Ubuntu AMD64
  hosts: localhost
  connection: local
  become: true
  gather_facts: true
  ignore_errors: false
  vars:
    K0S_MAJOR_MINOR_VERSION: "1.33"
    ENABLE_DYNAMIC_CONFIG: false
    CRIO_VERSION: "v1.33"
    LB_IP_RANGE_START: ""
    LB_IP_RANGE_STOP: ""
    REGISTRY_MIRROR: ""
    WORKER_DATA: ""

  pre_tasks:
    - name: Check if system is supported
      block:
        - name: Check if distribution is Debian or Ubuntu
          fail:
            msg: "This playbook only supports Debian or Ubuntu distributions"
          when: ansible_distribution not in ["Debian", "Ubuntu"]

        - name: Check if architecture is AMD64
          fail:
            msg: "This playbook only supports AMD64 architecture"
          when: ansible_architecture != "x86_64"

        - name: Get OS version
          debug:
            msg: "Running on {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_architecture }})"

    - name: Wait for system to be ready
      wait_for:
        path: /var/lib/cloud/instance/boot-finished
        timeout: 600
      when: ansible_service_mgr is defined and lookup('env', 'CLOUD_INIT') != ''

  handlers:
    - name: Restart sshd
      systemd:
        name: ssh
        state: restarted
        daemon_reload: yes
      when: ansible_service_mgr == 'systemd'

    - name: Restart crio
      systemd:
        name: crio
        state: restarted
        daemon_reload: yes
      when: ansible_service_mgr == 'systemd'

  tasks:
    - name: Clean up system packages and snap
      block:
        - name: Remove all snap packages
          shell: |
            snap list | awk '!/^Name|^core|^snapd|^lxd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^lxd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^core/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^snapd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '!/^Name/ {print $1}' | xargs -r snap remove --purge
          ignore_errors: true
          when: ansible_distribution == "Ubuntu"

        - name: Remove system packages
          apt:
            name:
              - lxd
              - lxd-agent-loader
              - lxd-installer
              - plymouth
              - snapd
            state: absent
            purge: yes
            autoremove: yes

        - name: Remove snap directories
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /root/snap
            - /run/snapd
            - /snap
            - /var/cache/snapd
            - /var/snap

        - name: Mask unnecessary systemd units
          systemd:
            name: "{{ item }}"
            masked: yes
          loop:
            - lxd-installer.socket
            - plymouth-quit-wait.service
            - plymouth-quit.service
            - plymouth-read-write.service
            - plymouth-start.service
            - snapd.mounts-pre.target
            - snapd.seeded.service

    - name: Remove system users and groups
      block:
        - name: Remove users
          user:
            name: "{{ item }}"
            state: absent
            remove: yes
          loop:
            - lxd
          ignore_errors: true

        - name: Remove groups
          group:
            name: "{{ item }}"
            state: absent
          loop:
            - lxd
          ignore_errors: true

    - name: Update and upgrade system packages
      apt:
        update_cache: yes
        upgrade: yes
      register: system_upgraded

    - name: Consolidated package management
      block:
        - name: Create directory for apt keyrings
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"

        # Note: `ansible.builtin.deb822_repository` requires Ansible 2.15+

        - name: Download CRI-O signing key
          ansible.builtin.get_url:
            url: "https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ CRIO_VERSION }}/deb/Release.key"
            dest: "/etc/apt/keyrings/crio.asc"
            mode: "0644"

        - name: Create CRI-O repository file
          ansible.builtin.copy:
            dest: "/etc/apt/sources.list.d/crio.sources"
            content: |
              X-Repolib-Name: crio
              Types: deb
              URIs: https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ CRIO_VERSION }}/deb/
              Signed-By: /etc/apt/keyrings/crio.asc
              Suites: /
              Architectures: amd64
              Enabled: yes
            mode: "0644"

        - name: Update apt cache after adding repositories
          apt:
            update_cache: yes

        - name: Install remaining required packages
          apt:
            name:
              # Base dependencies
              - apt-transport-https
              - ca-certificates
              - curl
              - gettext-base
              - gnupg
              - tar
              # Locale
              - locales
              # SSH
              - openssh-server
              # GIT
              - git
              - git-lfs
              # Multipath
              - multipath-tools
              # Security
              - libseccomp2
              # Networking
              - ebtables
              - iproute2
              - libnetfilter-acct1
              - libnetfilter-cttimeout1
              - libnetfilter-log1
              - socat
              # Python dependencies
              - python3
              - python3-pip
              - python3-yaml
              # Containers
              - buildah
              # Kubernetes
              - cri-o
              # Text and JSON processing
              - gawk
              - jq
              - nano
              - sed
              - yq
              # TUI
              - mc
            state: present
            update_cache: yes
          when: system_upgraded is success

    - name: Install clusterctl
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/kubernetes-sigs/cluster-api/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/kubernetes-sigs/cluster-api/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download and Install clusterctl binary ({{ version }})
          get_url:
            url: "https://github.com/kubernetes-sigs/cluster-api/releases/download/{{ version }}/clusterctl-linux-amd64"
            dest: /usr/local/bin/clusterctl
            mode: "0755"
          when: version is defined
      when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

    - name: Install Cilium CLI
      block:
        - name: Get Cilium CLI latest version
          uri:
            url: "https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt"
            return_content: yes
          register: cilium_version_info

        - name: Set Cilium CLI version
          set_fact:
            cilium_version: "{{ cilium_version_info.content | trim }}"
          when: cilium_version_info is defined and cilium_version_info.status == 200

        - name: Download Cilium CLI
          get_url:
            url: "https://github.com/cilium/cilium-cli/releases/download/{{ cilium_version }}/cilium-linux-amd64.tar.gz"
            dest: "/tmp/cilium-linux-amd64.tar.gz"
          when: cilium_version is defined

        - name: Extract Cilium CLI to /usr/local/bin
          unarchive:
            src: "/tmp/cilium-linux-amd64.tar.gz"
            dest: "/usr/local/bin"
            remote_src: yes
            mode: "0755"
          when: cilium_version is defined
      when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

    - name: Configure and generate locale
      block:
        - name: Set locale in configuration
          copy:
            dest: /etc/default/locale
            content: |
              LANG=C.UTF-8

        - name: Generate locale
          command: locale-gen en_US.UTF-8
          changed_when: false

    - name: Configure SSH client
      copy:
        dest: /etc/ssh/ssh_config
        content: |
          Host *
            AddressFamily inet
            ForwardAgent yes
            PasswordAuthentication no
            # CheckHostIP no
            # HashKnownHosts no
            # StrictHostKeyChecking no

    - name: Configure SSH server
      block:
        - name: Configure root login restrictions
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "^#?PermitRootLogin"
            line: "PermitRootLogin prohibit-password"
          notify: Restart sshd

        - name: Remove cloud-init SSH configuration
          file:
            path: /etc/ssh/sshd_config.d/60-cloudimg-settings.conf
            state: absent
          notify: Restart sshd

    - name: Configure multipath
      block:
        - name: Create multipath configuration file
          copy:
            dest: /etc/multipath.conf
            content: |
              defaults {
                user_friendly_names yes
              }
            mode: "0644"
          register: multipath_conf

        - name: Enable and start multipathd service
          systemd:
            name: multipathd
            enabled: yes
            state: started

        - name: Restart multipathd service on configuration change
          systemd:
            name: multipathd
            state: restarted
          when: multipath_conf is changed

    - name: Configure kernel modules
      block:
        - name: Ensure required kernel modules are loaded
          shell: modprobe {{ item }}
          loop:
            - overlay
            - br_netfilter
          changed_when: false

        - name: Persist required kernel modules
          copy:
            dest: /etc/modules-load.d/99-local.conf
            content: |
              overlay
              br_netfilter
            mode: "0644"

        - name: Configure kernel parameters
          copy:
            dest: /etc/sysctl.d/99-local.conf
            content: |
              fs.inotify.max_user_instances = 8192
              fs.inotify.max_user_watches = 524288
              kernel.panic = 10
              kernel.panic_on_oops = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1
              net.ipv4.conf.all.rp_filter = 1
              net.ipv4.ip_forward = 1
              net.ipv4.tcp_congestion_control = bbr
              net.ipv6.conf.all.disable_ipv6 = 0
              net.ipv6.conf.all.forwarding = 1
              vm.overcommit_memory = 1
            mode: "0644"

        - name: Apply kernel parameters
          command: sysctl --system
          changed_when: false

    - name: Disable swap
      block:
        - name: Disable swap memory
          shell: |
            swapoff -a
          when: ansible_memory_mb.swap.total != 0

        - name: Disable swap entries in fstab
          lineinfile:
            path: /etc/fstab
            regexp: '^([^#].*\s+swap\s+.*)$'
            line: '#\1'
            backrefs: yes
          when: ansible_memory_mb.swap.total != 0

    - name: Configure GRUB
      block:
        - name: Create GRUB configuration directory
          file:
            path: /etc/default/grub.d
            state: directory
            mode: "0755"

        - name: Configure GRUB settings
          copy:
            dest: /etc/default/grub.d/50-settings.cfg
            content: |
              # Set the recordfail timeout
              GRUB_RECORDFAIL_TIMEOUT=0

              # Do not wait on grub prompt
              GRUB_TIMEOUT=0

              # Set the default commandline
              GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 transparent_hugepage=madvise"

              # Set the grub console type
              GRUB_TERMINAL=console
            mode: "0644"
          register: grub_config

        - name: Update GRUB configuration
          command: update-grub
          when: grub_config is changed

    - name: Install etcd network tuning script and udev rule
      block:
        - name: Create directory for scripts
          file:
            path: /usr/local/sbin
            state: directory
            mode: "0755"
            owner: root
            group: root

        - name: Install etcd network tuning script
          copy:
            dest: /usr/local/sbin/etcd-network-tuning.sh
            content: |
              #!/bin/bash

              export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

              set -o errexit  # exits immediately on any unexpected error (does not bypass traps)
              set -o nounset  # will error if variables are used without first being defined
              set -o pipefail # any non-zero exit code in a piped command causes the pipeline to fail with that code

              trap on_exit ERR
              on_exit() {
                  echo "Error setting etcd network tuning parameters for interface: ${DEV}" | systemd-cat -p emerg -t etcd-tuning
              }

              if [ "$#" -ne 1 ]; then
                  echo "Error: Usage: $0 <dev>" | systemd-cat -p emerg -t etcd-tuning
                  exit 1
              fi

              DEV=$1

              echo "Setting etcd network tuning parameters for interface: ${DEV}" | systemd-cat -p info -t etcd-tuning
              tc qdisc del dev ${DEV} root 2>/dev/null || true
              tc qdisc add dev ${DEV} root handle 1: prio bands 3
              tc filter add dev ${DEV} parent 1: protocol ip prio 1 u32 match ip sport 2380 0xffff flowid 1:1
              tc filter add dev ${DEV} parent 1: protocol ip prio 1 u32 match ip dport 2380 0xffff flowid 1:1
              tc filter add dev ${DEV} parent 1: protocol ip prio 2 u32 match ip sport 2379 0xffff flowid 1:1
              tc filter add dev ${DEV} parent 1: protocol ip prio 2 u32 match ip dport 2379 0xffff flowid 1:1

              exit 0
            mode: "0755"
            owner: root
            group: root
          register: script_install

        - name: Install udev rule for etcd network tuning
          copy:
            dest: /etc/udev/rules.d/90-etcd-network-tuning.rules
            content: |
              ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="pci|xen|vmbus" RUN+="/usr/local/sbin/etcd-network-tuning.sh $name"
            mode: "0644"
            owner: root
            group: root
          register: udev_rule_install

        - name: Reload udev rules if changed
          command: udevadm control --reload-rules
          when: udev_rule_install.changed

        - name: Trigger udev events for network interfaces if script or rules changed
          shell: find /sys/class/net -mindepth 1 -maxdepth 1 -type l -name "[a-z]*" -not -name "lo" -printf "%f\n" | xargs -I{} udevadm trigger --action=add --subsystem-match=net --sysname-match={}
          when: script_install.changed or udev_rule_install.changed
      when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

    - name: Configure CRI-O
      # https://github.com/cri-o/cri-o/blob/main/README.md#configuration
      block:
        - name: Create CRI-O registries mirror configuration
          copy:
            dest: /etc/containers/registries.conf.d/mirror.conf
            content: |
              [[registry]]
              prefix = "docker.io"
              location = "docker.io"
              mirror = [{ location = "{{ REGISTRY_MIRROR }}" }]

              [[registry]]
              prefix = "quay.io"
              location = "quay.io"
              mirror = [{ location = "{{ REGISTRY_MIRROR }}" }]

              [[registry]]
              prefix = "gcr.io"
              location = "gcr.io"
              mirror = [{ location = "{{ REGISTRY_MIRROR }}" }]

              [[registry]]
              prefix = "registry.k8s.io"
              location = "registry.k8s.io"
              mirror = [{ location = "{{ REGISTRY_MIRROR }}" }]

              [[registry]]
              prefix = "k8s.gcr.io"
              location = "k8s.gcr.io"
              mirror = [{ location = "{{ REGISTRY_MIRROR }}" }]
            mode: "0644"
          when: REGISTRY_MIRROR is defined and REGISTRY_MIRROR | trim | length > 0
          notify: Restart crio

        - name: Enable and start CRI-O service
          systemd:
            name: crio
            enabled: yes
            state: started
            daemon_reload: yes

    - name: Install k0s
      block:
        - name: Get latest k0s {{ K0S_MAJOR_MINOR_VERSION }} version
          shell: |
            curl -s "https://api.github.com/repos/k0sproject/k0s/releases" | \
            jq -r '.[] | select(.tag_name | test("^v{{ K0S_MAJOR_MINOR_VERSION | replace(".", "\\.") }}\\.[0-9]+\\+k0s\\.[0-9]+$")) | .tag_name' | \
            head -1
          register: k0s_version_result
          changed_when: false

        - name: Set k0s version
          set_fact:
            k0s_version: "{{ k0s_version_result.stdout }}"
          when: k0s_version_result.stdout | length > 0

        - name: Download k0s binary ({{ k0s_version | default('version not found') }})
          get_url:
            url: "https://github.com/k0sproject/k0s/releases/download/{{ k0s_version }}/k0s-{{ k0s_version }}-amd64"
            dest: /usr/local/bin/k0s
            mode: "0755"
          when: k0s_version is defined

        - name: Create k0s configuration directory
          file:
            path: /etc/k0s
            state: directory
            mode: "0755"

        - name: Create k0s configuration file
          blockinfile:
            path: /etc/k0s/k0s.yaml
            create: yes
            block: |
              # Manual k0s cluster recreation commands:
              #
              # k0s stop ; k0s reset --kubelet-root-dir=/var/lib/kubelet --debug
              #
              # k0s install controller --enable-dynamic-config --disable-components=konnectivity-server --enable-worker --no-taints --profile numa --config /etc/k0s/k0s.yaml --kubelet-root-dir=/var/lib/kubelet --debug
              # k0s start ; sleep 5 ; systemctl status k0scontroller ; cat /proc/$(pidof kubelet)/cmdline | tr -s '\0' '\n' ; cat /run/k0s/kubelet/config.yaml
              #
              # k0s token create --role=worker
              # k0s kubeconfig admin | base64 -w 0
              #
              # k0s install worker --token-file=/etc/k0s/token --profile numa --kubelet-root-dir=/var/lib/kubelet --debug
              # k0s start ; sleep 5 ; systemctl status k0sworker ; cat /proc/$(pidof kubelet)/cmdline | tr -s '\0' '\n' ; cat /run/k0s/kubelet/config.yaml

              apiVersion: k0s.k0sproject.io/v1beta1
              kind: ClusterConfig
              metadata:
                name: k0s
                namespace: kube-system
              spec:
                telemetry:
                  enabled: false
              {% if REGISTRY_MIRROR is defined and REGISTRY_MIRROR | trim | length > 0 %}
                images:
                  repository: {{ REGISTRY_MIRROR }}
              {% endif %}
                storage:
                  type: etcd
                network:
                  provider: custom
                  dualStack:
                    enabled: false
                  calico:
                    mode: vxlan
                    mtu: 1400
                    overlay: Always
                    ipAutodetectionMethod: can-reach=8.8.8.8
                    envVars:
                      FELIX_IGNORELOOSERPF: "true"
                      FELIX_ALLOWVXLANPACKETSFROMWORKLOADS: "true"
                featureGates:
                  - name: ImageVolume
                    enabled: true
                workerProfiles:
                  - name: numa
                    values:
                      topologyManagerPolicy: "best-effort"
                      cpuManagerPolicy: "static"
                      cpuManagerPolicyOptions:
                        full-pcpus-only: "true"
                        distribute-cpus-across-numa: "true"
                      reservedSystemCPUs: "0"
                      reservedMemory:
                        - limits:
                            memory: 2Gi
                          numaNode: 0
                      kubeReservedCgroup: ""
            marker: ""
            mode: "0644"

        - name: Create systemd override directory for k0scontroller
          file:
            path: /etc/systemd/system/k0scontroller.service.d
            state: directory
            mode: "0755"
          when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

        - name: Create systemd override directory for k0sworker
          file:
            path: /etc/systemd/system/k0sworker.service.d
            state: directory
            mode: "0755"
          when: WORKER_DATA is defined and WORKER_DATA | trim | length > 0

        - name: Configure k0scontroller service override
          copy:
            dest: /etc/systemd/system/k0scontroller.service.d/override.conf
            content: |
              [Service]
              LimitNOFILE=1048576
              OOMScoreAdjust=-999
            mode: "0644"
          when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

        - name: Configure k0sworker service override
          copy:
            dest: /etc/systemd/system/k0sworker.service.d/override.conf
            content: |
              [Service]
              LimitNOFILE=1048576
              OOMScoreAdjust=-999
            mode: "0644"
          when: WORKER_DATA is defined and WORKER_DATA | trim | length > 0

        - name: Install k0s as a Controller
          shell: |
            if [ ! -f /etc/systemd/system/k0scontroller.service ]; then
              DYNAMIC_CONFIG_FLAG=""
              if [ "${ENABLE_DYNAMIC_CONFIG:-false}" = "true" ]; then
                DYNAMIC_CONFIG_FLAG="--enable-dynamic-config"
              fi

              DISABLED_COMPONENTS_FLAG="--disable-components=konnectivity-server"

              k0s install controller -c /etc/k0s/k0s.yaml $DYNAMIC_CONFIG_FLAG $DISABLED_COMPONENTS_FLAG --enable-worker --no-taints --profile numa --cri-socket=remote:unix:///var/run/crio/crio.sock --kubelet-root-dir=/var/lib/kubelet --verbose
            fi
          args:
            executable: /bin/bash
          environment:
            ENABLE_DYNAMIC_CONFIG: "{{ ENABLE_DYNAMIC_CONFIG | default(false) | string | lower }}"
          when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

        - name: Create Worker token file
          copy:
            content: "{{ WORKER_DATA }}"
            dest: /etc/k0s/token
            mode: "0600"
          when: WORKER_DATA is defined and WORKER_DATA | trim | length > 0

        - name: Install k0s as a Worker with token
          shell: |
            if [ ! -f /etc/systemd/system/k0sworker.service ]; then
              k0s install worker --token-file=/etc/k0s/token --profile numa --cri-socket=remote:unix:///var/run/crio/crio.sock --kubelet-root-dir=/var/lib/kubelet --verbose
            fi
          args:
            executable: /bin/bash
          when: WORKER_DATA is defined and WORKER_DATA | trim | length > 0

        - name: Start k0s Controller service
          systemd:
            name: k0scontroller.service
            state: started
            enabled: yes
          when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

        - name: Start k0s Worker service
          systemd:
            name: k0sworker.service
            state: started
            enabled: yes
          when: WORKER_DATA is defined and WORKER_DATA | trim | length > 0

        - name: Create k0s shell configuration file
          copy:
            dest: /etc/profile.d/k0s.sh
            content: |
              export KUBECONFIG=/var/lib/k0s/pki/admin.conf
            mode: "0755"
          when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

        - name: Create kubectl symlink
          file:
            src: /usr/local/bin/k0s
            dest: /usr/local/bin/kubectl
            state: link

    - name: Install and configure Cilium CNI
      block:
        - name: Install Cilium CNI with L2 announcements
          shell: |
            export KUBECONFIG=/var/lib/k0s/pki/admin.conf
            cilium install --set l2announcements.enabled=true --set devices='{eth+,ens+,eno+,enp+}'
          args:
            executable: /bin/bash
          register: cilium_install_result
          until: cilium_install_result.rc == 0
          retries: 40
          delay: 60

        - name: Wait for Cilium to be ready
          shell: |
            export KUBECONFIG=/var/lib/k0s/pki/admin.conf
            cilium status --wait
          args:
            executable: /bin/bash
          register: cilium_status_result
          until: cilium_status_result.rc == 0
          retries: 40
          delay: 60

        - name: Wait for k0s cluster to be ready
          shell: |
            export KUBECONFIG=/var/lib/k0s/pki/admin.conf
            k0s kubectl wait --for=condition=Ready nodes --all --timeout=300s
          args:
            executable: /bin/bash
          register: cluster_ready
          until: cluster_ready.rc == 0
          retries: 10
          delay: 30
      when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

    - name: Configure Cilium Load Balancer
      block:
        - name: Create Cilium LoadBalancer IP Pool
          copy:
            dest: /etc/k0s/cilium-lb-config.yaml
            content: |
              apiVersion: "cilium.io/v2"
              kind: CiliumLoadBalancerIPPool
              metadata:
                name: "default-pool"
              spec:
                blocks:
                - start: "{{ LB_IP_RANGE_START }}"
                  stop: "{{ LB_IP_RANGE_STOP }}"
            mode: "0644"

        - name: Apply Cilium LoadBalancer configuration
          shell: |
            export KUBECONFIG=/var/lib/k0s/pki/admin.conf
            k0s kubectl apply -f /etc/k0s/cilium-lb-config.yaml
          args:
            executable: /bin/bash
          register: cilium_lb_apply_result
          until: cilium_lb_apply_result.rc == 0
          retries: 5
          delay: 30
      when:
        - WORKER_DATA is not defined or WORKER_DATA | trim | length == 0
        - LB_IP_RANGE_START | default("") | length > 0
        - LB_IP_RANGE_STOP | default("") | length > 0

    - name: Deploy local-path-provisioner via k0s manifests
      block:
        - name: Get latest local-path-provisioner version
          uri:
            url: "https://api.github.com/repos/rancher/local-path-provisioner/releases/latest"
            return_content: yes
          register: lpp_release_info

        - name: Set local-path-provisioner version
          set_fact:
            lpp_version: "{{ lpp_release_info.json.tag_name }}"
          when: lpp_release_info is defined and lpp_release_info.status == 200

        - name: Create k0s manifests directory for local-path-provisioner
          file:
            path: /var/lib/k0s/manifests/local-path-provisioner
            state: directory
            mode: "0755"

        - name: Download and deploy local-path-provisioner manifest
          get_url:
            url: "https://raw.githubusercontent.com/rancher/local-path-provisioner/{{ lpp_version }}/deploy/local-path-storage.yaml"
            dest: /var/lib/k0s/manifests/local-path-provisioner/local-path-storage.yaml
            mode: "0644"
          when: lpp_version is defined

        - name: Set local-path as default storage class
          blockinfile:
            path: /var/lib/k0s/manifests/local-path-provisioner/local-path-storage.yaml
            marker: "# {mark} ANSIBLE MANAGED BLOCK - Default StorageClass"
            insertafter: "kind: StorageClass"
            block: |
              metadata:
                name: local-path
                annotations:
                  storageclass.kubernetes.io/is-default-class: "true"
      when: WORKER_DATA is not defined or WORKER_DATA | trim | length == 0

    - name: Mask unnecessary systemd units
      systemd:
        name: "{{ item }}"
        masked: yes
      loop:
        - display-manager.service

    - name: Handle system reboot check
      block:
        - name: Check if reboot is required
          stat:
            path: /var/run/reboot-required
          register: reboot_required_file

        - name: Print reboot status
          debug:
            msg: "System reboot is required"
          when: reboot_required_file.stat.exists
      when: system_upgraded is success
